name: QuartzLauncher Build

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions
permissions:
  contents: write

jobs:
  build:
    name: Build QuartzLauncher
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ==================== Checkout QuartzLauncher ====================
      - name: Checkout QuartzLauncher
        uses: actions/checkout@v4
        with:
          path: quartzlauncher
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      # ==================== Get Latest Tag ====================
      - name: Get latest PrismLauncher tag
        id: prism-tag
        run: |
          set -euo pipefail

          echo "🔍 Fetching latest PrismLauncher tag..."

          # Use GitHub API with built-in retry
          TAG=$(curl -sL --retry 3 --retry-delay 2 --retry-all-errors \
            --connect-timeout 10 --max-time 30 \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/PrismLauncher/PrismLauncher/tags \
            | jq -r '.[0].name // empty' 2>/dev/null)

          if [ -z "$TAG" ]; then
            echo "❌ No tags found in PrismLauncher repository"
            echo "tag=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Validate tag format
          if ! echo "$TAG" | grep -qE '^[0-9]+\.[0-9]+(\.[0-9]+)?(-.*)?$'; then
            echo "⚠️  Warning: Tag format unusual: $TAG"
          fi

          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "📦 Latest PrismLauncher tag: ${TAG}"

      - name: Check if already synced
        id: check
        working-directory: quartzlauncher
        run: |
          set -euo pipefail

          TAG="${{ steps.prism-tag.outputs.tag }}"

          if [ -z "$TAG" ]; then
            echo "should-build=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "✅ Already synced - tag $TAG exists"
            echo "should-build=false" >> "$GITHUB_OUTPUT"
          else
            echo "🆕 New release detected: $TAG"
            echo "should-build=true" >> "$GITHUB_OUTPUT"
          fi

      # ==================== Checkout PrismLauncher ====================
      - name: Checkout PrismLauncher at tag
        if: steps.check.outputs.should-build == 'true'
        uses: actions/checkout@v4
        with:
          repository: PrismLauncher/PrismLauncher
          ref: ${{ steps.prism-tag.outputs.tag }}
          path: prismlauncher
          fetch-depth: 0
          persist-credentials: false

      # ==================== Apply Customizations ====================
      - name: Copy custom icons
        if: steps.check.outputs.should-build == 'true'
        run: |
          set -euo pipefail

          echo "🎨 Copying custom icons..."
          mkdir -p prismlauncher/program_info/

          if [ -d "quartzlauncher/Icons" ] && [ "$(ls -A quartzlauncher/Icons 2>/dev/null)" ]; then
            cp -rv quartzlauncher/Icons/* prismlauncher/program_info/
            echo "✅ Icons copied successfully"
          else
            echo "⚠️  No custom icons found, using defaults"
          fi

      - name: Apply patches
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        run: |
          set -euo pipefail

          echo "🔧 Applying patches..."
          shopt -s nullglob
          PATCHES=(../quartzlauncher/patches/*.patch)

          if [ ${#PATCHES[@]} -eq 0 ]; then
            echo "⚠️  No patches to apply"
            exit 0
          fi

          FAILED_PATCHES=()
          APPLIED_COUNT=0

          for patch in "${PATCHES[@]}"; do
            PATCH_NAME=$(basename "$patch")
            echo "  → Testing $PATCH_NAME"

            # Dry-run first
            if ! git apply --check "$patch" 2>/dev/null; then
              echo "❌ Dry-run failed for: $PATCH_NAME"
              FAILED_PATCHES+=("$PATCH_NAME")
              continue
            fi

            echo "  → Applying $PATCH_NAME"
            if git apply "$patch"; then
              APPLIED_COUNT=$((APPLIED_COUNT + 1))
            else
              echo "❌ Failed to apply: $PATCH_NAME"
              FAILED_PATCHES+=("$PATCH_NAME")
            fi
          done

          if [ ${#FAILED_PATCHES[@]} -gt 0 ]; then
            echo "❌ Failed to apply ${#FAILED_PATCHES[@]} patch(es): ${FAILED_PATCHES[*]}"
            exit 1
          fi

          echo "✅ Successfully applied ${APPLIED_COUNT} patch(es)"

      # ==================== Configure Git ====================
      - name: Configure Git
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # ==================== Sync Branch ====================
      - name: Sync quartzlauncher branch
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        id: sync
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail

          TAG="${{ steps.prism-tag.outputs.tag }}"

          # Set remote URL with token
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          # Fetch existing branches
          git fetch origin --prune

          # Create or reset branch
          if git ls-remote --exit-code --heads origin quartzlauncher >/dev/null 2>&1; then
            echo "📥 Fetching existing quartzlauncher branch..."
            git fetch origin quartzlauncher:quartzlauncher
            git checkout quartzlauncher
          else
            echo "🆕 Creating new quartzlauncher branch..."
            git checkout -b quartzlauncher
          fi

          # Stage all changes
          git add -A

          # Check for changes
          if git diff --cached --quiet; then
            echo "has-changes=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️  No changes detected"
          else
            # Commit changes
            git commit -m "Sync with PrismLauncher $TAG" \
                       -m "- Applied QuartzLauncher customizations" \
                       -m "- Custom icons and patches integrated" \
                       -m "" \
                       -m "Source: https://github.com/PrismLauncher/PrismLauncher/releases/tag/$TAG"

            # Use --force-with-lease for safer force push
            if git push --force-with-lease origin quartzlauncher; then
              echo "has-changes=true" >> "$GITHUB_OUTPUT"
              echo "✅ Branch synced and pushed"
            else
              echo "❌ Failed to push branch (may have been updated by another process)"
              exit 1
            fi
          fi

      # ==================== Create Release Tag ====================
      - name: Create release tag
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail

          TAG="${{ steps.prism-tag.outputs.tag }}"

          # Ensure remote is set
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          # Check if tag already exists remotely
          if git ls-remote --exit-code --tags origin "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "⚠️  Tag $TAG already exists remotely"
            exit 0
          fi

          # Delete local tag if exists
          git tag -d "$TAG" 2>/dev/null || true

          # Create annotated tag
          git tag -a "$TAG" -m "QuartzLauncher $TAG" \
                           -m "" \
                           -m "Based on PrismLauncher $TAG with custom patches and branding." \
                           -m "" \
                           -m "Upstream: https://github.com/PrismLauncher/PrismLauncher/releases/tag/$TAG" \
                           -m "Build: ${{ github.run_id }}" \
                           -m "Commit: ${{ github.sha }}"

          # Push tag
          if git push origin "$TAG"; then
            echo "🏷️  Successfully created and pushed tag: $TAG"
          else
            echo "❌ Failed to push tag: $TAG"
            exit 1
          fi

      # ==================== Summary ====================
      - name: Workflow summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ### 📊 Sync Summary

          **PrismLauncher Version:** `${{ steps.prism-tag.outputs.tag || 'N/A' }}`

          EOF

          if [ "${{ steps.check.outputs.should-build }}" == "true" ]; then
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ### ✅ Actions Completed

          - 🎨 Custom icons applied
          - 🔧 Patches integrated
          - 🔄 Synced to `quartzlauncher` branch
          - 🏷️  Tagged as `${{ steps.prism-tag.outputs.tag }}`

          EOF

            if [ "${{ steps.sync.outputs.has-changes }}" == "true" ]; then
              echo "**Status:** 🟢 New changes committed and pushed" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** 🟡 No code changes (tag-only update)" >> $GITHUB_STEP_SUMMARY
            fi

            cat >> $GITHUB_STEP_SUMMARY << 'EOF'

          **Links:**
          - [PrismLauncher Release](https://github.com/PrismLauncher/PrismLauncher/releases/tag/${{ steps.prism-tag.outputs.tag }})
          - [QuartzLauncher Branch](https://github.com/${{ github.repository }}/tree/quartzlauncher)
          - [QuartzLauncher Tag](https://github.com/${{ github.repository }}/releases/tag/${{ steps.prism-tag.outputs.tag }})
          EOF
          else
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ### ℹ️ No Action Required

          Already up-to-date with PrismLauncher `${{ steps.prism-tag.outputs.tag }}`
          EOF
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Last checked: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY

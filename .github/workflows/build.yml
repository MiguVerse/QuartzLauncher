name: QuartzLauncher Build

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Build QuartzLauncher
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ==================== Checkout ====================
      - name: Checkout QuartzLauncher
        uses: actions/checkout@v4
        with:
          path: quartzlauncher
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      # ==================== Get Latest Tag ====================
      - name: Get latest PrismLauncher tag
        id: prism-tag
        run: |
          set -euo pipefail

          TAG=$(curl -sL --retry 3 --retry-delay 2 --retry-all-errors \
            --connect-timeout 10 --max-time 30 \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/PrismLauncher/PrismLauncher/tags \
            | jq -r '.[0].name // empty' 2>/dev/null)

          [ -z "$TAG" ] && { echo "❌ No tags found"; exit 1; }

          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "📦 Latest tag: ${TAG}"

      # ==================== Sync Branch (develop) ====================
      - name: Checkout PrismLauncher develop
        uses: actions/checkout@v4
        with:
          repository: PrismLauncher/PrismLauncher
          ref: develop
          path: prismlauncher-develop
          fetch-depth: 0
          persist-credentials: false

      - name: Apply customizations to develop
        working-directory: prismlauncher-develop
        run: |
          set -euo pipefail

          # Copy icons
          mkdir -p program_info/
          [ -d "../quartzlauncher/Icons" ] && \
            [ "$(ls -A ../quartzlauncher/Icons 2>/dev/null)" ] && \
            cp -rv ../quartzlauncher/Icons/* program_info/

          # Apply patches
          shopt -s nullglob
          PATCHES=(../quartzlauncher/patches/*.patch)

          for patch in "${PATCHES[@]}"; do
            if git apply --check "$patch" 2>/dev/null; then
              git apply "$patch" && echo "✅ $(basename "$patch")"
            else
              echo "⚠️  Skipped $(basename "$patch")"
            fi
          done

      - name: Sync branch if needed
        working-directory: prismlauncher-develop
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          git fetch origin --prune
          git add -A
          NEW_TREE=$(git write-tree)

          # Check if sync needed
          if git ls-remote --exit-code --heads origin quartzlauncher >/dev/null 2>&1; then
            OLD_TREE=$(git rev-parse origin/quartzlauncher^{tree} 2>/dev/null || echo "")
            [ "$NEW_TREE" = "$OLD_TREE" ] && { echo "✅ Branch up-to-date"; exit 0; }
          fi

          # Sync needed
          echo "🔄 Syncing branch..."
          git checkout -B quartzlauncher
          git commit -m "Sync with PrismLauncher develop" \
                     -m "Upstream: https://github.com/PrismLauncher/PrismLauncher/tree/develop" \
                     --allow-empty

          git push --force-with-lease origin quartzlauncher 2>/dev/null || git push -f origin quartzlauncher
          echo "✅ Branch synced"

      # ==================== Create/Update Tag ====================
      - name: Checkout PrismLauncher at tag
        uses: actions/checkout@v4
        with:
          repository: PrismLauncher/PrismLauncher
          ref: ${{ steps.prism-tag.outputs.tag }}
          path: prismlauncher-tag
          fetch-depth: 0
          persist-credentials: false

      - name: Apply customizations to tag
        working-directory: prismlauncher-tag
        run: |
          set -euo pipefail

          # Copy icons
          mkdir -p program_info/
          [ -d "../quartzlauncher/Icons" ] && \
            [ "$(ls -A ../quartzlauncher/Icons 2>/dev/null)" ] && \
            cp -rv ../quartzlauncher/Icons/* program_info/

          # Apply patches
          shopt -s nullglob
          PATCHES=(../quartzlauncher/patches/*.patch)

          for patch in "${PATCHES[@]}"; do
            git apply --check "$patch" 2>/dev/null && git apply "$patch"
          done

      - name: Create or update tag if needed
        working-directory: prismlauncher-tag
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          TAG: ${{ steps.prism-tag.outputs.tag }}
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          git fetch origin --prune --tags
          git add -A
          NEW_TREE=$(git write-tree)

          # Check if tag update needed
          if git ls-remote --exit-code --tags origin "refs/tags/$TAG" >/dev/null 2>&1; then
            git fetch origin "refs/tags/$TAG:refs/tags/$TAG"
            OLD_TREE=$(git rev-parse "$TAG^{tree}" 2>/dev/null || echo "")
            [ "$NEW_TREE" = "$OLD_TREE" ] && { echo "✅ Tag up-to-date"; exit 0; }

            # Delete old tag
            git push origin ":refs/tags/$TAG" 2>/dev/null || true
          fi

          # Create tag
          echo "🏷️  Creating tag $TAG..."
          git commit -m "QuartzLauncher $TAG" \
                     -m "Upstream: https://github.com/PrismLauncher/PrismLauncher/releases/tag/$TAG" \
                     --allow-empty

          git tag -a "$TAG" -m "QuartzLauncher $TAG" \
                           -m "Build: ${{ github.run_id }}"

          git push origin "$TAG"
          echo "✅ Tag created"

      # ==================== Summary ====================
      - name: Workflow summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ### 📊 QuartzLauncher Sync

          **Tag:** `${{ steps.prism-tag.outputs.tag }}`

          - 🌿 **Branch `quartzlauncher`**: Synced with PrismLauncher `develop`
          - 🏷️  **Tag `${{ steps.prism-tag.outputs.tag }}`**: Based on stable release

          ### 🔗 Links
          - [Branch (develop-based)](https://github.com/${{ github.repository }}/tree/quartzlauncher)
          - [Tag (release-based)](https://github.com/${{ github.repository }}/releases/tag/${{ steps.prism-tag.outputs.tag }})

          *Last run: $(date -u '+%Y-%m-%d %H:%M:%S')*
          EOF

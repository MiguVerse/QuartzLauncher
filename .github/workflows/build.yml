name: QuartzLauncher Build

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Minimal required permissions
permissions:
  contents: write

jobs:
  build:
    name: Build QuartzLauncher
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ==================== Checkout QuartzLauncher ====================
      - name: Checkout QuartzLauncher
        uses: actions/checkout@v4
        with:
          path: quartzlauncher
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      # ==================== Get Latest Tag ====================
      - name: Get latest PrismLauncher tag
        id: prism-tag
        run: |
          set -euo pipefail

          echo "üîç Fetching latest PrismLauncher tag..."

          # Use GitHub API with built-in retry
          TAG=$(curl -sL --retry 3 --retry-delay 2 --retry-all-errors \
            --connect-timeout 10 --max-time 30 \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/PrismLauncher/PrismLauncher/tags \
            | jq -r '.[0].name // empty' 2>/dev/null)

          if [ -z "$TAG" ]; then
            echo "‚ùå No tags found in PrismLauncher repository"
            echo "tag=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Validate tag format
          if ! echo "$TAG" | grep -qE '^[0-9]+\.[0-9]+(\.[0-9]+)?(-.*)?$'; then
            echo "‚ö†Ô∏è  Warning: Tag format unusual: $TAG"
          fi

          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "üì¶ Latest PrismLauncher tag: ${TAG}"

      # ==================== Check if Sync Needed ====================
      - name: Check if sync needed
        id: check
        working-directory: quartzlauncher
        env:
          TAG: ${{ steps.prism-tag.outputs.tag }}
        run: |
          set -euo pipefail

          if [ -z "$TAG" ]; then
            echo "should-build=false" >> "$GITHUB_OUTPUT"
            echo "reason=no-tag" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "üîç Checking sync status for tag: $TAG"

          # Check if tag exists locally
          if ! git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "üÜï Tag $TAG doesn't exist - sync needed"
            echo "should-build=true" >> "$GITHUB_OUTPUT"
            echo "reason=new-tag" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Check if quartzlauncher branch exists remotely
          if ! git ls-remote --exit-code --heads origin quartzlauncher >/dev/null 2>&1; then
            echo "üÜï Branch quartzlauncher doesn't exist - sync needed"
            echo "should-build=true" >> "$GITHUB_OUTPUT"
            echo "reason=no-branch" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Fetch remote branch
          git fetch origin quartzlauncher:refs/remotes/origin/quartzlauncher

          # Get commit message of remote branch to check synced version
          REMOTE_COMMIT_MSG=$(git log -1 --pretty=%B origin/quartzlauncher || echo "")

          # Check if the remote branch is synced with this tag
          if ! echo "$REMOTE_COMMIT_MSG" | grep -q "Sync with PrismLauncher $TAG"; then
            echo "üîÑ Branch exists but not synced with tag $TAG - sync needed"
            echo "   Remote commit message: $REMOTE_COMMIT_MSG"
            echo "should-build=true" >> "$GITHUB_OUTPUT"
            echo "reason=out-of-sync" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "‚úÖ Already synced with PrismLauncher $TAG"
          echo "should-build=false" >> "$GITHUB_OUTPUT"
          echo "reason=up-to-date" >> "$GITHUB_OUTPUT"

      # ==================== Checkout PrismLauncher ====================
      - name: Checkout PrismLauncher at tag
        if: steps.check.outputs.should-build == 'true'
        uses: actions/checkout@v4
        with:
          repository: PrismLauncher/PrismLauncher
          ref: ${{ steps.prism-tag.outputs.tag }}
          path: prismlauncher
          fetch-depth: 0
          persist-credentials: false

      # ==================== Apply Customizations ====================
      - name: Copy custom icons
        if: steps.check.outputs.should-build == 'true'
        run: |
          set -euo pipefail

          echo "üé® Copying custom icons..."
          mkdir -p prismlauncher/program_info/

          if [ -d "quartzlauncher/Icons" ] && [ "$(ls -A quartzlauncher/Icons 2>/dev/null)" ]; then
            cp -rv quartzlauncher/Icons/* prismlauncher/program_info/
            echo "‚úÖ Icons copied successfully"
          else
            echo "‚ö†Ô∏è  No custom icons found, using defaults"
          fi

      - name: Apply patches
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        run: |
          set -euo pipefail

          echo "üîß Applying patches..."
          shopt -s nullglob
          PATCHES=(../quartzlauncher/patches/*.patch)

          if [ ${#PATCHES[@]} -eq 0 ]; then
            echo "‚ö†Ô∏è  No patches to apply"
            exit 0
          fi

          FAILED_PATCHES=()
          APPLIED_COUNT=0

          for patch in "${PATCHES[@]}"; do
            PATCH_NAME=$(basename "$patch")
            echo "  ‚Üí Testing $PATCH_NAME"

            # Dry-run first
            if ! git apply --check "$patch" 2>/dev/null; then
              echo "‚ùå Dry-run failed for: $PATCH_NAME"
              FAILED_PATCHES+=("$PATCH_NAME")
              continue
            fi

            echo "  ‚Üí Applying $PATCH_NAME"
            if git apply "$patch"; then
              APPLIED_COUNT=$((APPLIED_COUNT + 1))
            else
              echo "‚ùå Failed to apply: $PATCH_NAME"
              FAILED_PATCHES+=("$PATCH_NAME")
            fi
          done

          if [ ${#FAILED_PATCHES[@]} -gt 0 ]; then
            echo "‚ùå Failed to apply ${#FAILED_PATCHES[@]} patch(es): ${FAILED_PATCHES[*]}"
            exit 1
          fi

          echo "‚úÖ Successfully applied ${APPLIED_COUNT} patch(es)"

      # ==================== Configure Git ====================
      - name: Configure Git
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # ==================== Verify Content Changed ====================
      - name: Check if content actually changed
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        id: content-check
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          TAG: ${{ steps.prism-tag.outputs.tag }}
        run: |
          set -euo pipefail

          echo "üîç Checking if content differs from existing branch..."

          # Set remote URL
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          # Fetch existing branches
          git fetch origin --prune

          # Stage all changes (icons + patches)
          git add -A

          # Create temporary commit to compare tree
          git commit -m "temp" --allow-empty || true
          NEW_TREE=$(git rev-parse HEAD^{tree})

          # Check if quartzlauncher branch exists remotely
          if git ls-remote --exit-code --heads origin quartzlauncher >/dev/null 2>&1; then
            echo "üì• Comparing with existing quartzlauncher branch..."
            git fetch origin quartzlauncher:quartzlauncher
            git checkout quartzlauncher
            OLD_TREE=$(git rev-parse HEAD^{tree})

            # Compare tree hashes (content comparison)
            if [ "$NEW_TREE" = "$OLD_TREE" ]; then
              echo "‚ÑπÔ∏è  Content is identical to existing branch"
              echo "has-changes=false" >> "$GITHUB_OUTPUT"
              exit 0
            else
              echo "üîÑ Content has changed - sync needed"
              echo "   Old tree: $OLD_TREE"
              echo "   New tree: $NEW_TREE"
            fi
          else
            echo "üÜï Branch doesn't exist yet"
          fi

          echo "has-changes=true" >> "$GITHUB_OUTPUT"

      # ==================== Sync Branch ====================
      - name: Sync quartzlauncher branch
        if: steps.check.outputs.should-build == 'true' && steps.content-check.outputs.has-changes == 'true'
        working-directory: prismlauncher
        id: sync
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          TAG: ${{ steps.prism-tag.outputs.tag }}
        run: |
          set -euo pipefail

          echo "üîÑ Syncing quartzlauncher branch..."

          # Set remote URL
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          # Create or switch to branch
          git checkout -B quartzlauncher

          # Reset to PrismLauncher tag + our changes
          git reset --soft $TAG

          # Stage all changes
          git add -A

          # Commit with proper message
          git commit -m "Sync with PrismLauncher $TAG" \
                     -m "- Applied QuartzLauncher customizations" \
                     -m "- Custom icons and patches integrated" \
                     -m "" \
                     -m "Source: https://github.com/PrismLauncher/PrismLauncher/releases/tag/$TAG" \
                     --allow-empty

          # Force push with lease
          if git push --force-with-lease origin quartzlauncher; then
            echo "‚úÖ Branch synced and pushed"
          else
            echo "‚ö†Ô∏è  --force-with-lease failed, using regular force push"
            git push -f origin quartzlauncher
          fi

      # ==================== Create Release Tag ====================
      - name: Create release tag
        if: steps.check.outputs.should-build == 'true'
        working-directory: prismlauncher
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          TAG: ${{ steps.prism-tag.outputs.tag }}
        run: |
          set -euo pipefail

          # Set remote URL
          git remote set-url origin "https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          # Check if tag already exists remotely
          if git ls-remote --exit-code --tags origin "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "‚ÑπÔ∏è  Tag $TAG already exists remotely"
            exit 0
          fi

          # Ensure we're on quartzlauncher branch
          git checkout quartzlauncher 2>/dev/null || git checkout -b quartzlauncher

          # Delete local tag if exists
          git tag -d "$TAG" 2>/dev/null || true

          # Create annotated tag
          git tag -a "$TAG" -m "QuartzLauncher $TAG" \
                           -m "" \
                           -m "Based on PrismLauncher $TAG with custom patches and branding." \
                           -m "" \
                           -m "Upstream: https://github.com/PrismLauncher/PrismLauncher/releases/tag/$TAG" \
                           -m "Build: ${{ github.run_id }}" \
                           -m "Commit: ${{ github.sha }}"

          # Push tag
          if git push origin "$TAG"; then
            echo "üè∑Ô∏è  Successfully created and pushed tag: $TAG"
          else
            echo "‚ùå Failed to push tag: $TAG"
            exit 1
          fi

      # ==================== Summary ====================
      - name: Workflow summary
        if: always()
        env:
          TAG: ${{ steps.prism-tag.outputs.tag }}
          SHOULD_BUILD: ${{ steps.check.outputs.should-build }}
          REASON: ${{ steps.check.outputs.reason }}
          HAS_CHANGES: ${{ steps.content-check.outputs.has-changes }}
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ### üìä Sync Summary

          **PrismLauncher Version:** \`${TAG:-N/A}\`
          **Sync Reason:** \`${REASON:-unknown}\`

          EOF

          if [ "$SHOULD_BUILD" == "true" ]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ### ‚úÖ Actions Completed

          - üé® Custom icons applied
          - üîß Patches integrated
          - üîÑ Synced to \`quartzlauncher\` branch
          - üè∑Ô∏è  Tagged as \`${TAG}\`

          EOF

            if [ "$HAS_CHANGES" == "true" ]; then
              echo "**Status:** üü¢ New changes committed and pushed" >> $GITHUB_STEP_SUMMARY
            elif [ "$HAS_CHANGES" == "false" ]; then
              echo "**Status:** üü° No content changes (tag already up-to-date)" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** üü¢ Branch and tag updated" >> $GITHUB_STEP_SUMMARY
            fi

            cat >> $GITHUB_STEP_SUMMARY << EOF

          **Links:**
          - [PrismLauncher Release](https://github.com/PrismLauncher/PrismLauncher/releases/tag/${TAG})
          - [QuartzLauncher Branch](https://github.com/${{ github.repository }}/tree/quartzlauncher)
          - [QuartzLauncher Tag](https://github.com/${{ github.repository }}/releases/tag/${TAG})
          EOF
          else
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ### ‚ÑπÔ∏è No Action Required

          Already up-to-date with PrismLauncher \`${TAG}\`

          The quartzlauncher branch is already synced with the latest release.
          EOF
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Last checked: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY
